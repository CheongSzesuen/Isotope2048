<template>
  <div class="container" @swipe="move">
    <!--背景+按钮-->
    <div class="bg" if="{{ dark }}">
      <img src="/common/bg2.png" class="bg-img" />
      <img class="btn-reset" src="/common/reset_b.png" @click="new_game" />
      <img class="btn-undo" src="/common/undo_b.png" @click="chcb" />
      <img class="btn-info" src="/common/info_b.png" @click="openMenu()" />
    </div>
    <div class="bg" else>
      <img src="/common/bg1.png" class="bg-img" />
      <img class="btn-reset" src="/common/reset.png" @click="new_game" />
      <img class="btn-undo" src="/common/undo.png" @click="chcb" />
      <img class="btn-info" src="/common/info.png" @click="openMenu()" />
    </div>

    <!--游戏区域-->
    <div class="game-board">
      <block for="blocks">
        <text
          class="square"
          style="background-color: {{ bgc[md[$item]] }};"
          if="{{ !dark }}"
          id="{{ $item }}"
        >
          {{ getElementSymbol(md[$item]) }}
          <span if="{{ unstable[$item] > 0 }}" class="unstable-count">{{ unstable[$item] }}</span>
        </text>
        <text
          class="square"
          style="color: {{ bgc[md[$item]] }};background-color: {{ ise[$item] }}"
          else
          id="{{ $item }}"
        >
          {{ getElementSymbol(md[$item]) }}
          <span if="{{ unstable[$item] > 0 }}" class="unstable-count">{{ unstable[$item] }}</span>
        </text>
      </block>
    </div>

    <!--分数显示-->
    <text class="score">最高 {{ hsc }}</text>
    <text class="current-score">当前 {{ sco }}</text>

    <!--关于菜单-->
    <div class="menu-overlay" if="{{ menuFlag }}">
      <scroll class="menu-content" scroll-y="true" bounces="true" id="about">
        <img src="/common/about.png" />
        <img src="/common/true.png" if="{{ dark }}" class="mode-btn" @click="changeMode" />
        <img src="/common/false.png" else class="mode-btn" @click="changeMode" />
        <!-- <img src="/common/true.png" if="{{ ani }}" class="ani-btn" @click="changeani" />
        <img src="/common/false.png" else class="ani-btn" @click="changeani" /> -->
      </scroll>
    </div>

    <!--返回按钮-->
    <img
      class="btn-back"
      src="{{ dark||menuFlag ? '/common/back_b.png' : '/common/back.png' }}"
      @click="exit('e')"
    />
  </div>
</template>

<script>
import prompt from "@system.prompt"
import storage from "@system.storage"

// 元素符号映射表
const elements = {
  2: "H", // 氢
  4: "He", // 氦
  8: "Be", // 铍
  16: "O", // 氧
  32: "P", // 磷
  64: "Ni", // 镍
  128: "U", // 铀
  256: "Pu", // 钋
  512: "Fm", // 镄
  1024: "Og", // 鿫
  2048: "∞" // ∞无穷-宇宙坍缩
}

// 不稳定元素配置（按照要求设置操作次数）
const unstableConfig = {
  8: 8, // 铍，8次移动后爆炸
  32: 24, // 磷，24次移动后爆炸
  128: 96, // 铀，96次移动后爆炸
  256: 192, // 钚（Pu），192次移动后爆炸
  512: 384, // 镄（Fm），384次移动后爆炸
  1024: 768 // 鿫（Og），768次移动后爆炸
}

function isUnstable(value) {
  return unstableConfig[value] !== undefined
}

var sc = 0,
  ls,
  lhs,
  board = Array(4),
  added = Array(4),
  over = 0,
  lm = Array(4),
  explodedTiles = [], // 记录爆炸的方块信息
  that

// 初始化数组
for (let i = 0; i < 4; i++) {
  lm[i] = new Array(4)
  board[i] = new Array(4)
  added[i] = new Array(4)
}

export default {
  public: {
    blocks: ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15"],
    md: [],
    unstable: Array(16).fill(0),
    hsc: 0,
    sco: sc,
    bgc: [],
    ise: [],
    ch: 0,
    dark: false,
    menuFlag: false,
    ani: true
  },

  getElementSymbol(value) {
    return elements[value] || ""
  },

  onInit() {
    that = this
    // 初始化颜色
    let tempc =
      "rgba(0,0,0,0) #EFE5DA #F0E0C9 #fcb477 #ff9c61 #ff865d #ff6a38 #ebcf71 #ebcc5f #ebc94f #ebc53f #ebc22c #F2B6B6 #E8ED51 #FFE3FB #E8FF8C #FFDEC9 #F5A433 #E6109B #96C4E6 #E560CD".split(
        " "
      )
    tempc.forEach((a, index) => {
      this.bgc[2 ** index] = a
    })
    this.bgc[""] = "rgba(0, 0, 0, 0)"

    // 加载游戏状态
    storage.get({
      key: "score",
      success: (data) => {
        if (data) {
          let o = JSON.parse(data)
          board = o.map.map((row) =>
            row.map((cell) => {
              if (typeof cell === "object") return cell
              return {value: cell, unstable: 0}
            })
          )
          this.updateUnstableDisplay()
          rm0(board)
          this.hsc = o.hs
          this.sco = o.sc
          this.ch = o.ch || 0
          this.dark = o.dark
          this.ani = o.ani
          // 恢复爆炸方块数据
          if (o.explodedTiles) {
            explodedTiles = o.explodedTiles
          }
          // 恢复撤销数据
          if (o.lm) {
            for (let i = 0; i < 4; i++) {
              for (let j = 0; j < 4; j++) {
                lm[i][j] = o.lm[i][j] ? {...o.lm[i][j]} : 0
              }
            }
            ls = o.ls
            lhs = o.lhs
          }
        } else {
          this.new_game()
        }
      }
    })
    clear(added)
  },

  updateUnstableDisplay() {
    let index = 0
    for (let i = 0; i < 4; i++) {
      for (let j = 0; j < 4; j++) {
        this.unstable[index] = board[i][j]?.unstable || 0
        index++
      }
    }
  },

  chcb() {
    if (this.ch == 1) {
      this.hsc = lhs
      this.sco = ls

      // 恢复爆炸的方块
      explodedTiles.forEach((tile) => {
        board[tile.x][tile.y] = {
          value: tile.value,
          unstable: tile.unstable || 0
        }
      })
      explodedTiles = []

      // 恢复游戏状态
      for (let i = 0; i < 4; i++) {
        for (let j = 0; j < 4; j++) {
          board[i][j] = lm[i][j] ? {...lm[i][j]} : 0
        }
      }

      this.updateUnstableDisplay()
      rm0(board)
      over = 0
      this.save()
      this.ch = 0
    } else {
      prompt.showToast({
        message: "不，不可以再撤啦",
        duration: 500
      })
    }
  },

  new_game() {
    backup()
    newgame()
    this.sco = 0
    this.save()
  },

  move(eve) {
    if (this.menuFlag) {
      if (eve.direction == "right") this.exit("e")
      return
    }

    const direction = eve.direction.toLowerCase()
    if (["up", "down", "left", "right"].includes(direction)) {
      backup() // 在移动前备份状态
      mo(direction)
      if (over) {
        prompt.showToast({
          message: "Gameover!",
          duration: 2000
        })
      }
      if (this.sco > this.hsc) {
        this.hsc = this.sco
      }
      this.save()
    }
  },

  save() {
    let o = {
      map: board.map((row) =>
        row.map((cell) => {
          if (!cell) return 0
          return {
            value: cell.value,
            unstable: cell.unstable || 0
          }
        })
      ),
      hs: this.hsc,
      sc: this.sco,
      dark: this.dark,
      ani: this.ani,
      ch: this.ch,
      // 保存撤销数据
      lm: lm.map((row) =>
        row.map((cell) => {
          if (!cell) return 0
          return {
            value: cell.value,
            unstable: cell.unstable || 0
          }
        })
      ),
      ls: ls,
      lhs: lhs,
      // 保存爆炸方块数据
      explodedTiles: explodedTiles
    }
    storage.set({
      key: "score",
      value: JSON.stringify(o),
      success: () => {},
      fail: () => {}
    })
  },

  exit(a) {
    if (a.direction == "right" || a == "e") {
      if (this.menuFlag) {
        this.menuFlag = false
      } else {
        this.$app.exit()
      }
    }
  },

  openMenu() {
    this.menuFlag = true
  },

  changeMode() {
    this.dark = !this.dark
    this.save()
  },

  changeani() {
    this.ani = !this.ani
    this.save()
  },

  onBackPress() {
    this.exit("e")
    return true
  }
}

// 辅助函数
function backup() {
  // 清空之前的爆炸记录
  explodedTiles = []

  // 备份当前状态
  for (let i = 0; i < 4; i++) {
    for (let j = 0; j < 4; j++) {
      lm[i][j] = board[i][j] ? {...board[i][j]} : 0
    }
  }
  ls = that.sco
  lhs = that.hsc
  that.ch = 1
}

function rm0(sm) {
  let a = 0
  for (let i = 0; i < 4; i++) {
    for (var b = 0; 4 > b; b++) {
      if (!sm[i][b] || sm[i][b].value === 0) {
        that.md[a] = ""
        that.ise[a] = "#00000000"
        that.unstable[a] = 0
      } else {
        that.ise[a] = "#ffffff20"
        that.md[a] = sm[i][b].value
        that.unstable[a] = sm[i][b].unstable || 0
      }
      a++
    }
  }
}

function clear(m) {
  for (let i = 0; i < 4; i++) {
    m[i].fill(0)
  }
}

function newgame() {
  over = 0
  clear(board)
  newblock()
  newblock()
  rm0(board)
}

function rand_num() {
  return Math.floor(Math.random() * 1000)
}

function newblock() {
  for (
    var a = 3, b = rand_num() % 4, c = rand_num() % 4, d = 50 < rand_num() % 100 ? 4 : 2;
    0 < a;

  ) {
    if (!board[b][c] || board[b][c].value === 0) {
      board[b][c] = {
        value: d,
        unstable: isUnstable(d) ? unstableConfig[d] : 0
      }
      return
    }
    b = rand_num() % 4
    c = rand_num() % 4
    a--
  }

  if (!canMoveLeft(board) && !canMoveRight(board) && !canMoveUp(board) && !canMoveDown(board)) {
    over = 1
    return
  }

  for (a = 0; 4 > a; a++) {
    for (b = 0; 4 > b; b++) {
      if (!board[a][b] || board[a][b].value === 0) {
        board[a][b] = {
          value: 2,
          unstable: 0
        }
        return
      }
    }
  }
}

function mo(dir) {
  let moved = false

  switch (dir) {
    case "left":
      moved = moveleft()
      break
    case "right":
      moved = moveright()
      break
    case "up":
      moved = moveup()
      break
    case "down":
      moved = movedown()
      break
  }

  if (moved) {
    // 更新不稳定方块计数器
    for (let i = 0; i < 4; i++) {
      for (let j = 0; j < 4; j++) {
        if (board[i][j] && board[i][j].unstable > 0) {
          board[i][j].unstable--
          if (board[i][j].unstable === 0) {
            // 记录爆炸的方块信息
            explodedTiles.push({
              x: i,
              y: j,
              value: board[i][j].value,
              unstable: board[i][j].unstable
            })

            that.sco += Math.floor(board[i][j].value * 0.5)
            board[i][j] = 0
            prompt.showToast({
              message: "元素不稳定爆炸了！",
              duration: 500
            })
          }
        }
      }
    }

    clear(added)
    newblock()
    that.updateUnstableDisplay()
    rm0(board)
  }
}

// 移动和合并函数（以moveleft为例，其他方向类似）
function moveleft() {
  let moved = false
  for (let a = 0; a < 4; a++) {
    for (let b = 1; b < 4; b++) {
      const current = board[a][b]
      if (current && current.value !== 0) {
        for (let c = 0; c < b; c++) {
          const target = board[a][c]

          if ((!target || target.value === 0) && noBlockHorizontal(a, c, b, board)) {
            board[a][c] = current
            board[a][b] = 0
            moved = true
            break
          } else if (
            target &&
            target.value === current.value &&
            noBlockHorizontal(a, c, b, board) &&
            0 == added[a][c]
          ) {
            const newValue = target.value * 2
            board[a][c] = {
              value: newValue,
              unstable: isUnstable(newValue) ? unstableConfig[newValue] : 0
            }

            let bonus = 0
            if (current.unstable) bonus += current.unstable * 5
            if (target.unstable) bonus += target.unstable * 5
            that.sco += board[a][c].value + bonus

            board[a][b] = 0
            added[a][c] = 1
            moved = true
            break
          }
        }
      }
    }
  }
  return moved
}

// 其他移动函数（moveright/moveup/movedown）结构相同，只是方向不同
function moveright() {
  let moved = false
  for (let a = 0; a < 4; a++) {
    for (let b = 2; b >= 0; b--) {
      const current = board[a][b]
      if (current && current.value !== 0) {
        for (let c = 3; c > b; c--) {
          const target = board[a][c]

          if ((!target || target.value === 0) && noBlockHorizontal(a, b, c, board)) {
            board[a][c] = current
            board[a][b] = 0
            moved = true
            break
          } else if (
            target &&
            target.value === current.value &&
            noBlockHorizontal(a, b, c, board) &&
            0 == added[a][c]
          ) {
            const newValue = target.value * 2
            board[a][c] = {
              value: newValue,
              unstable: isUnstable(newValue) ? unstableConfig[newValue] : 0
            }

            let bonus = 0
            if (current.unstable) bonus += current.unstable * 5
            if (target.unstable) bonus += target.unstable * 5
            that.sco += newValue + bonus

            board[a][b] = 0
            added[a][c] = 1
            moved = true
            break
          }
        }
      }
    }
  }
  return moved
}

function moveup() {
  let moved = false
  for (let a = 0; a < 4; a++) {
    for (let b = 1; b < 4; b++) {
      const current = board[b][a]
      if (current && current.value !== 0) {
        for (let c = 0; c < b; c++) {
          const target = board[c][a]

          if ((!target || target.value === 0) && noBlockVertical(a, c, b, board)) {
            board[c][a] = current
            board[b][a] = 0
            moved = true
            break
          } else if (
            target &&
            target.value === current.value &&
            noBlockVertical(a, c, b, board) &&
            0 == added[c][a]
          ) {
            const newValue = target.value * 2
            board[c][a] = {
              value: newValue,
              unstable: isUnstable(newValue) ? unstableConfig[newValue] : 0
            }

            let bonus = 0
            if (current.unstable) bonus += current.unstable * 5
            if (target.unstable) bonus += target.unstable * 5
            that.sco += newValue + bonus

            board[b][a] = 0
            added[c][a] = 1
            moved = true
            break
          }
        }
      }
    }
  }
  return moved
}

function movedown() {
  let moved = false
  for (let a = 0; a < 4; a++) {
    for (let b = 2; b >= 0; b--) {
      const current = board[b][a]
      if (current && current.value !== 0) {
        for (let c = 3; c > b; c--) {
          const target = board[c][a]

          if ((!target || target.value === 0) && noBlockVertical(a, b, c, board)) {
            board[c][a] = current
            board[b][a] = 0
            moved = true
            break
          } else if (
            target &&
            target.value === current.value &&
            noBlockVertical(a, b, c, board) &&
            0 == added[c][a]
          ) {
            const newValue = target.value * 2
            board[c][a] = {
              value: newValue,
              unstable: isUnstable(newValue) ? unstableConfig[newValue] : 0
            }

            let bonus = 0
            if (current.unstable) bonus += current.unstable * 5
            if (target.unstable) bonus += target.unstable * 5
            that.sco += newValue + bonus

            board[b][a] = 0
            added[c][a] = 1
            moved = true
            break
          }
        }
      }
    }
  }
  return moved
}

// 移动可能性判断函数
function canMoveLeft(a) {
  for (let b = 0; b < 4; b++) {
    for (let c = 0; c < 4; c++) {
      const cell = a[b][c]
      if (cell && cell.value !== 0 && c != 0) {
        const left = a[b][c - 1]
        if (!left || left.value === 0 || left.value === cell.value) {
          return true
        }
      }
    }
  }
  return false
}

function canMoveRight(a) {
  for (let b = 0; b < 4; b++) {
    for (let c = 0; c < 4; c++) {
      const cell = a[b][c]
      if (cell && cell.value !== 0 && c != 3) {
        const right = a[b][c + 1]
        if (!right || right.value === 0 || right.value === cell.value) {
          return true
        }
      }
    }
  }
  return false
}

function canMoveUp(a) {
  for (let b = 0; b < 4; b++) {
    for (let c = 0; c < 4; c++) {
      const cell = a[b][c]
      if (cell && cell.value !== 0 && b != 0) {
        const up = a[b - 1][c]
        if (!up || up.value === 0 || up.value === cell.value) {
          return true
        }
      }
    }
  }
  return false
}

function canMoveDown(a) {
  for (let b = 0; b < 4; b++) {
    for (let c = 0; c < 4; c++) {
      const cell = a[b][c]
      if (cell && cell.value !== 0 && b != 3) {
        const down = a[b + 1][c]
        if (!down || down.value === 0 || down.value === cell.value) {
          return true
        }
      }
    }
  }
  return false
}

// 判断移动路径是否有阻碍
function noBlockHorizontal(a, b, c, d) {
  for (b += 1; b < c; b++) {
    if (d[a][b] && d[a][b].value !== 0) return false
  }
  return true
}

function noBlockVertical(a, b, c, d) {
  for (b += 1; b < c; b++) {
    if (d[b][a] && d[b][a].value !== 0) return false
  }
  return true
}
</script>

<style>
.container {
  position: relative;
  width: 192px;
  height: 490px;
}

.bg {
  position: absolute;
  width: 100%;
  height: 100%;
}

.bg-img {
  width: 100%;
  height: 100%;
}

.btn-reset {
  position: absolute;
  left: 8px;
  top: 363px;
}

.btn-undo {
  position: absolute;
  left: 100px;
  top: 363px;
}

.btn-info {
  position: absolute;
  left: 56px;
  top: 424px;
}

.btn-back {
  position: absolute;
  left: 45px;
  top: 6px;
}

.game-board {
  position: absolute;
  left: 3px;
  top: 165px;
  width: 186px;
  height: 186px;
  padding-top: 3px;
  padding-left: 3px;
  display: flex;
  flex-wrap: wrap;
}

.square {
  width: 40px;
  height: 40px;
  margin-top: 4px;
  margin-left: 4px;
  border-radius: 13px;
  font-size: 15px;
  color: #59503f;
  font-weight: bold;
  text-align: center;
  position: relative;
}

.unstable-count {
  position: absolute;
  bottom: 2px;
  right: 2px;
  font-size: 10px;
  color: red;
  font-weight: bold;
}

.score {
  position: absolute;
  left: 0;
  top: 84px;
  width: 100%;
  font-size: 28px;
  color: rgba(255, 255, 255, 0.6);
  text-align: center;
}

.current-score {
  position: absolute;
  left: 0;
  top: 122px;
  width: 100%;
  font-size: 28px;
  color: rgba(255, 255, 255, 0.6);
  text-align: center;
}

.menu-overlay {
  position: absolute;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0);
}

.menu-content {
  position: absolute;
  width: 100%;
  height: 100%;
}

.mode-btn {
  position: absolute;
  left: 45px;
  top: 633px;
}
</style>
